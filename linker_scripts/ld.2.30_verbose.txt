GNU ld (GNU Binutils) 2.30
  Supported emulations:
   aix5ppc
   aix5rs6
   aixppc
   aixrs6
   alpha
   alphavms
   arcv2elf
   arcv2elfx
   arcelf
   arcelf_prof
   arclinux
   arclinux_nps
   arclinux_prof
   arm_epoc_pe
   arm_wince_pe
   armaoutb
   armaoutl
   armcoff
   armelf
   armelf_fbsd
   armelf_fuchsia
   armelf_linux
   armelf_linux_eabi
   armelf_nacl
   armelf_nbsd
   armelf_phoenix
   armelf_vxworks
   armelfb
   armelfb_fbsd
   armelfb_fuchsia
   armelfb_linux
   armelfb_linux_eabi
   armelfb_nacl
   armelfb_nbsd
   armnbsd
   armnto
   armpe
   armsymbian
   avr1
   avr2
   avr25
   avr3
   avr31
   avr35
   avr4
   avr5
   avr51
   avr6
   avrxmega1
   avrxmega2
   avrxmega3
   avrxmega4
   avrxmega5
   avrxmega6
   avrxmega7
   avrtiny
   coff_i860
   coff_sparc
   crisaout
   criself
   crislinux
   d10velf
   d30v_e
   d30v_o
   d30velf
   delta68
   elf32_dlx
   elf32_i860
   elf32_i960
   elf32_sparc
   elf32_sparc_sol2
   elf32_sparc_vxworks
   elf32_spu
   elf32_tic6x_be
   elf32_tic6x_le
   elf32_tic6x_linux_be
   elf32_tic6x_linux_le
   elf32_tic6x_elf_be
   elf32_tic6x_elf_le
   elf32am33lin
   elf32bfin
   elf32bfinfd
   elf32cr16
   elf32cr16c
   elf32crx
   elf32epiphany
   elf32epiphany_4x4
   elf32fr30
   elf32frv
   elf32frvfd
   elf32ft32
   elf32i370
   elf32ip2k
   elf32iq10
   elf32iq2000
   elf32lm32
   elf32lm32fd
   elf32lppc
   elf32lppclinux
   elf32lppcnto
   elf32lppcsim
   elf32m32c
   elf32mb_linux
   elf32mbel_linux
   elf32mcore
   elf32mep
   elf32metag
   elf32microblazeel
   elf32microblaze
   elf32moxie
   moxiebox
   elf32mt
   elf32or1k
   elf32or1k_linux
   elf32ppc
   elf32ppc_fbsd
   elf32ppclinux
   elf32ppcnto
   elf32ppcsim
   elf32ppcvxworks
   elf32ppcwindiss
   elf32lriscv
   elf32rl78
   elf32rx
   elf32tilegx
   elf32tilegx_be
   elf32tilepro
   elf32vax
   elf32visium
   elf32xc16x
   elf32xc16xl
   elf32xc16xs
   elf32xstormy16
   elf32xtensa
   elf_i386
   elf_i386_be
   elf_i386_chaos
   elf_i386_fbsd
   elf_i386_ldso
   elf_i386_nacl
   elf_i386_sol2
   elf_i386_vxworks
   elf_iamcu
   elf_s390
   960
   960coff
   h8300
   h8300elf
   h8300elf_linux
   h8300h
   h8300helf
   h8300helf_linux
   h8300hn
   h8300hnelf
   h8300s
   h8300self
   h8300self_linux
   h8300sn
   h8300snelf
   h8300sx
   h8300sxelf
   h8300sxelf_linux
   h8300sxn
   h8300sxnelf
   h8500
   h8500b
   h8500c
   h8500m
   h8500s
   hp300bsd
   hp3hpux
   hppaelf
   hppalinux
   hppanbsd
   hppaobsd
   i386aout
   i386beos
   i386bsd
   i386coff
   i386go32
   i386linux
   i386lynx
   i386mach
   i386moss
   i386msdos
   i386nbsd
   i386nto
   i386nw
   i386pe
   i386pe_posix
   lnk960
   m32relf
   m32relf_linux
   m32rlelf
   m32rlelf_linux
   m68hc11elf
   m68hc11elfb
   m68hc12elf
   m68hc12elfb
   m68k4knbsd
   m68kaout
   m68kaux
   m68kcoff
   m68kelf
   m68kelfnbsd
   m68klinux
   m68knbsd
   m68kpsos
   m88kbcs
   mcorepe
   mn10200
   mn10300
   msp430elf
   msp430X
   nds32elf
   nds32elf16m
   nds32elf_linux
   nds32belf
   nds32belf16m
   nds32belf_linux
   news
   ns32knbsd
   nios2elf
   nios2linux
   pc532macha
   pdp11
   pjelf
   pjlelf
   ppclynx
   ppcmacos
   ppcnw
   ppcpe
   pruelf
   riscix
   score3_elf
   score7_elf
   sh
   shelf
   shelf32
   shelf32_linux
   shelf32_nbsd
   shelf_fd
   shelf_linux
   shelf_nbsd
   shelf_nto
   shelf_uclinux
   shelf_vxworks
   shl
   shlelf
   shlelf32
   shlelf32_linux
   shlelf32_nbsd
   shlelf_fd
   shlelf_linux
   shlelf_nbsd
   shlelf_nto
   shlelf_vxworks
   shlsymbian
   shpe
   sparcaout
   sparclinux
   sparcnbsd
   st2000
   sun3
   sun4
   tic30aout
   tic30coff
   tic3xcoff
   tic3xcoff_onchip
   tic4xcoff
   tic54xcoff
   tic80coff
   v850
   v850_rh850
   vanilla
   vax
   vaxnbsd
   vsta
   w65
   xgateelf
   z80
   z8001
   z8002
   aarch64elf
   aarch64elf32
   aarch64elfb
   aarch64elf32b
   aarch64cloudabi
   aarch64cloudabib
   aarch64fbsd
   aarch64fbsdb
   aarch64linux
   aarch64linuxb
   aarch64linux32
   aarch64linux32b
   elf32_x86_64
   elf32_x86_64_nacl
   elf32b4300
   elf32bmip
   elf32bmipn32
   elf32bsmip
   elf32btsmip
   elf32btsmip_fbsd
   elf32btsmipn32
   elf32btsmipn32_fbsd
   elf32ebmip
   elf32ebmipvxworks
   elf32elmip
   elf32elmipvxworks
   elf32l4300
   elf32lmip
   elf32lr5900
   elf32lr5900n32
   elf32lsmip
   elf32ltsmip
   elf32ltsmip_fbsd
   elf32ltsmipn32
   elf32ltsmipn32_fbsd
   elf32mipswindiss
   elf64_aix
   elf64_ia64
   elf64_ia64_fbsd
   elf64_ia64_vms
   elf64_s390
   elf64_sparc
   elf64_sparc_fbsd
   elf64_sparc_sol2
   elf64alpha
   elf64alpha_fbsd
   elf64alpha_nbsd
   elf64bmip
   elf64btsmip
   elf64btsmip_fbsd
   elf64hppa
   elf64lppc
   elf64lriscv
   elf64ltsmip
   elf64ltsmip_fbsd
   elf64mmix
   elf64ppc
   elf64ppc_fbsd
   elf64rdos
   elf64tilegx
   elf64tilegx_be
   elf_l1om
   elf_l1om_fbsd
   elf_k1om
   elf_k1om_fbsd
   elf_x86_64
   elf_x86_64_cloudabi
   elf_x86_64_fbsd
   elf_x86_64_nacl
   elf_x86_64_sol2
   hppa64linux
   i386pep
   mmo
   shelf64
   shelf64_nbsd
   shlelf64
   shlelf64_nbsd
using internal linker script:
==================================================
/* Script for -z combreloc: combine and sort reloc sections */
/* Copyright (C) 2014-2018 Free Software Foundation, Inc.
   Copying and distribution of this script, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  */
OUTPUT_FORMAT("elf64-x86-64-freebsd", "elf64-x86-64-freebsd",
	      "elf64-x86-64-freebsd")
OUTPUT_ARCH(i386:x86-64)
ENTRY(_start)
SEARCH_DIR("=/usr/local/x86_64-portbld-freebsd11.2/lib"); SEARCH_DIR("=/lib"); SEARCH_DIR("=/usr/lib"); SEARCH_DIR("=/usr/local/lib");
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
  .interp         : { *(.interp) }
  .note.gnu.build-id : { *(.note.gnu.build-id) }
  .hash           : { *(.hash) }
  .gnu.hash       : { *(.gnu.hash) }
  .dynsym         : { *(.dynsym) }
  .dynstr         : { *(.dynstr) }
  .gnu.version    : { *(.gnu.version) }
  .gnu.version_d  : { *(.gnu.version_d) }
  .gnu.version_r  : { *(.gnu.version_r) }
  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
      *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
      *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
      *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
      *(.rela.ifunc)
    }
  .rela.plt       :
    {
      *(.rela.plt)
      PROVIDE_HIDDEN (__rela_iplt_start = .);
      *(.rela.iplt)
      PROVIDE_HIDDEN (__rela_iplt_end = .);
    }
  .init           :
  {
    KEEP (*(SORT_NONE(.init)))
  }
  .plt            : { *(.plt) *(.iplt) }
.plt.got        : { *(.plt.got) }
.plt.sec        : { *(.plt.sec) }
  .text           :
  {
    *(.text.unlikely .text.*_unlikely .text.unlikely.*)
    *(.text.exit .text.exit.*)
    *(.text.startup .text.startup.*)
    *(.text.hot .text.hot.*)
    *(.text .stub .text.* .gnu.linkonce.t.*)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
  }
  .fini           :
  {
    KEEP (*(SORT_NONE(.fini)))
  }
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
  .rodata1        : { *(.rodata1) }
  .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
  .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
  .gcc_except_table.*) }
  .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
  /* These sections are generated by the Sun/Oracle C++ compiler.  */
  .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
  .exception_ranges*) }
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
  /* Exception handling  */
  .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
  .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
  .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
  .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
  /* Thread Local Storage sections  */
  .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
  .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  }
  .init_array     :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
    KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
    PROVIDE_HIDDEN (__init_array_end = .);
  }
  .fini_array     :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
    KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
    PROVIDE_HIDDEN (__fini_array_end = .);
  }
  .ctors          :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  }
  .dtors          :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  }
  .jcr            : { KEEP (*(.jcr)) }
  .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
  .dynamic        : { *(.dynamic) }
  .got            : { *(.got) *(.igot) }
  . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
  .got.plt        : { *(.got.plt)  *(.igot.plt) }
  .data           :
  {
    *(.data .data.* .gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
  }
  .data1          : { *(.data1) }
  _edata = .; PROVIDE (edata = .);
  . = .;
  __bss_start = .;
  .bss            :
  {
   *(.dynbss)
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.
      FIXME: Why do we need it? When there is no .bss section, we don't
      pad the .data section.  */
   . = ALIGN(. != 0 ? 64 / 8 : 1);
  }
  .lbss   :
  {
    *(.dynlbss)
    *(.lbss .lbss.* .gnu.linkonce.lb.*)
    *(LARGE_COMMON)
  }
  . = ALIGN(64 / 8);
  . = SEGMENT_START("ldata-segment", .);
  .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
  {
    *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
  }
  .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
  {
    *(.ldata .ldata.* .gnu.linkonce.l.*)
    . = ALIGN(. != 0 ? 64 / 8 : 1);
  }
  . = ALIGN(64 / 8);
  _end = .; PROVIDE (end = .);
  . = DATA_SEGMENT_END (.);
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  /* DWARF Extension.  */
  .debug_macro    0 : { *(.debug_macro) }
  .debug_addr     0 : { *(.debug_addr) }
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
}


==================================================
